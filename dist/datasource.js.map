{"version":3,"sources":["../src/datasource.js"],"names":["dateMath","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","requestRaw","method","then","response","status","message","title","options","start","convertToTsdbTime","rangeRaw","from","end","to","query","_","chain","targets","filter","target","objectId","metricName","hide","map","value","when","data","promises","fetchMetric","row","Promise","all","encodeURIComponent","nameField","displayPath","request","fetchObject","historyData","responses","objectInfo","datapoints","dps","dp","reverse","fields","isEmpty","join","datasourceRequest","Error","date","roundUp","parse","valueOf"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\n\n/**\n * Datasource plugin logic implementation.\n */\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = { 'Content-Type': 'application/json' };\n\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  /**\n   * Tests that the datasource configuration is correct by sending\n   * test request SAYMON instance.\n   *\n   * @returns {Promise} Datasource response promise.\n   */\n  testDatasource() {\n    return this\n      .requestRaw({\n        url: this.url + '/node/api/tags',\n        method: 'GET'\n      })\n      .then(response => {\n        if (response.status === 200) {\n          return { status: 'success', message: 'Data source is working', title: 'Success' };\n        }\n      });\n  }\n\n  /**\n   * Fetches metric data using SAYMON history REST method.\n   *\n   * @param {Object} options Query options.\n   * @returns {Promise} Data promise.\n   */\n  query(options) {\n    const start = this.convertToTsdbTime(options.rangeRaw.from, false) || '1h-ago';\n    const end = this.convertToTsdbTime(options.rangeRaw.to, true);\n    const query = _.chain(options.targets)\n      .filter(target => target.objectId && target.metricName && !target.hide)\n      .map(target => {\n        target.from = start;\n        target.to = end;\n\n        return target;\n      })\n      .value();\n\n    if (query.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    const promises = _.map(query, row => this.fetchMetric(row));\n\n    return Promise.all(promises).then(data => ({ data }));\n  }\n\n  /**\n   * Performs graph annotation query.\n   *\n   * @param {Object} options Query options.\n   */\n  annotationQuery(options) {\n    // Not implemented.\n  }\n\n  /**\n   * Fetches data for single Object-metric pair.\n   *\n   * @param {Object} query Metric query.\n   * @returns {Promise} Metric data promise.\n   */\n  fetchMetric(query) {\n    let url = `${this.url}/node/api/objects/${query.objectId}/history?from=${query.from}&metrics=${\n      encodeURIComponent(query.metricName)}`;\n\n    if (query.to) {\n      url += `&to=${query.to}`;\n    }\n\n    const nameField = query.displayPath ? 'path' : 'name';\n\n    return Promise\n      .all([\n        this.request({ url, method: 'GET' }),\n        this.fetchObject(query.objectId, [nameField])\n      ])\n      .then(responses => {\n        const historyData = responses[0];\n        const objectInfo = responses[1];\n        const data = historyData[0];\n\n        return {\n          target: `${objectInfo[nameField]}:${query.metricName}`,\n          datapoints: data && _.map(data.dps, dp => dp.reverse()) || []\n        };\n      });\n  }\n\n  /**\n   * Fetches metric names for a given SAYMON Object.\n   *\n   * @param {String} objectId SAYMON Object ID.\n   * @returns {Promise} Metric name array promise.\n   */\n  listMetrics(objectId) {\n    return this.request({\n      url: `${this.url}/node/api/objects/${objectId}/stat/metrics`,\n      method: 'GET'\n    });\n  }\n\n  /**\n   * Fetches object information for given SAYMON Object.\n   *\n   * @param {String} objectId Object ID.\n   * @param {String[]} [fields] List of object fields to fetch.\n   * @returns {Promise} Object information promise.\n   */\n  fetchObject(objectId, fields) {\n    return this.request({\n      url: `${this.url}/node/api/objects/${objectId}` + (!_.isEmpty(fields) ? `?fields=${fields.join(',')}` : ''),\n      method: 'GET'\n    });\n  }\n\n  /**\n   * Fetches full paths for all SAYMON Objects, paired with Object IDs.\n   *\n   * @returns {Promise} Path list promise.\n   */\n  listObjectPaths() {\n    return this.request({\n      url: `${this.url}/node/api/objects?fields=id,path`,\n      method: 'GET'\n    });\n  }\n\n  /**\n   * Performs request to SAYMON through backend proxy. Returns raw response.\n   *\n   * @param {Object} options Request options.\n   * @returns {Promise} Raw response promise.\n   */\n  requestRaw(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  /**\n   * Performs request to SAYMON through backend proxy and checks for response status code.\n   * Throws error if status is not 200.\n   *\n   * @param {Object} options Request options.\n   * @returns {Promise} Response body promise.\n   */\n  request(options) {\n    return this.requestRaw(options)\n      .then(response => {\n        if (response.status != 200) throw new Error(`Request ${options.url} failed: ${response.status}`);\n\n        return response.data;\n      });\n  }\n\n  /**\n   * Converts date-time to OpenTSDB format, supported by SAYMON.\n   *\n   * @param {String|Number} date Date-time string or number to convert.\n   * @param {Boolean} roundUp Round-up flag.\n   * @returns {*} Conversion result.\n   */\n  convertToTsdbTime(date, roundUp) {\n    if (date === 'now') {\n      return null;\n    }\n\n    date = dateMath.parse(date, roundUp);\n\n    return date.valueOf();\n  }\n}\n"]}